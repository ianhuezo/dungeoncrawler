{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Programming\\\\Dungeon Crawler\\\\pages\\\\level.js\";\nimport Map from './map';\nimport React from 'react';\nimport Square from './square';\nvar screen = {\n  width: '100%',\n  height: '100%',\n  backgroundColor: 'black',\n  margin: '0 auto'\n};\nvar squareContainer = {\n  margin: '0 auto',\n  position: 'relative',\n  length: '100%',\n  width: '100%',\n  padding: 0,\n  border: 0,\n  fontSize: 0,\n  letterSpacing: '-1px'\n};\n\nvar Level =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Level, _React$Component);\n\n  function Level(props) {\n    var _this;\n\n    _classCallCheck(this, Level);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Level).call(this, props)); //row col for new map\n\n    var rows = _this.props.rows;\n    var cols = _this.props.cols;\n    _this.board = new Map(60, 50);\n    _this.pixelSize = _this.props.pixelSize;\n    _this.arr2d = _this.board.contents;\n    return _this;\n  }\n\n  _createClass(Level, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      var id = 0;\n      this.squares = _Object$keys(this.arr2d).map(function (el, i) {\n        var offsetY = i * _this2.pixelSize;\n\n        var single = _this2.arr2d[el].map(function (sub_el, j) {\n          var offsetX = j * _this2.pixelSize; //sides\n\n          if (sub_el.type == 'X') {\n            {\n              id += 1;\n            }\n            return React.createElement(Square, {\n              key: id,\n              x: offsetX,\n              y: offsetY,\n              size: _this2.pixelSize,\n              node: sub_el,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 48\n              },\n              __self: this\n            });\n          } //corner (should be next to clear blocks)\n          else if (sub_el.type == 'C') {\n              {\n                id += 1;\n              }\n              return React.createElement(Square, {\n                key: id,\n                x: offsetX,\n                y: offsetY,\n                size: _this2.pixelSize,\n                node: sub_el,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 54\n                },\n                __self: this\n              });\n            } //the gooey insides\n            else if (sub_el.type == 'L') {\n                {\n                  id += 1;\n                }\n                return React.createElement(Square, {\n                  key: id,\n                  x: offsetX,\n                  y: offsetY,\n                  size: _this2.pixelSize,\n                  color: \"white\",\n                  node: sub_el,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 60\n                  },\n                  __self: this\n                });\n              } //hallways\n              else if (sub_el.type == 'H') {\n                  {\n                    id += 1;\n                  }\n                  return React.createElement(Square, {\n                    key: id,\n                    x: offsetX,\n                    y: offsetY,\n                    size: _this2.pixelSize,\n                    color: \"white\",\n                    node: sub_el,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 66\n                    },\n                    __self: this\n                  });\n                } //blanks\n                else if (sub_el.type == '-') {\n                    {\n                      id += 1;\n                    }\n                    return React.createElement(Square, {\n                      key: id,\n                      x: offsetX,\n                      y: offsetY,\n                      size: _this2.pixelSize,\n                      node: sub_el,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 72\n                      },\n                      __self: this\n                    });\n                  }\n        });\n\n        {\n          id += 1;\n        }\n        return React.createElement(\"div\", {\n          key: id,\n          style: squareContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, \" \", single);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        style: screen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, this.squares);\n    }\n  }]);\n\n  return Level;\n}(React.Component);\n\nexport default Level;","map":{"version":3,"sources":["D:\\Programming\\Dungeon Crawler\\pages\\level.js"],"names":["Map","React","Square","screen","width","height","backgroundColor","margin","squareContainer","position","length","padding","border","fontSize","letterSpacing","Level","props","rows","cols","board","pixelSize","arr2d","contents","id","squares","map","el","i","offsetY","single","sub_el","j","offsetX","type","Component"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,OAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAGA,IAAMC,MAAM,GAAG;AACXC,EAAAA,KAAK,EAAE,MADI;AAEXC,EAAAA,MAAM,EAAE,MAFG;AAGXC,EAAAA,eAAe,EAAE,OAHN;AAIXC,EAAAA,MAAM,EAAE;AAJG,CAAf;AAOA,IAAMC,eAAe,GAAG;AACpBD,EAAAA,MAAM,EAAE,QADY;AAEpBE,EAAAA,QAAQ,EAAE,UAFU;AAGpBC,EAAAA,MAAM,EAAE,MAHY;AAIpBN,EAAAA,KAAK,EAAE,MAJa;AAKpBO,EAAAA,OAAO,EAAE,CALW;AAMpBC,EAAAA,MAAM,EAAE,CANY;AAOpBC,EAAAA,QAAQ,EAAE,CAPU;AAQpBC,EAAAA,aAAa,EAAE;AARK,CAAxB;;IAaMC,K;;;;;AACF,iBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,+EAAMA,KAAN,GADc,CAEd;;AACA,QAAIC,IAAI,GAAG,MAAKD,KAAL,CAAWC,IAAtB;AACA,QAAIC,IAAI,GAAG,MAAKF,KAAL,CAAWE,IAAtB;AACA,UAAKC,KAAL,GAAa,IAAInB,GAAJ,CAAQ,EAAR,EAAY,EAAZ,CAAb;AACA,UAAKoB,SAAL,GAAiB,MAAKJ,KAAL,CAAWI,SAA5B;AACA,UAAKC,KAAL,GAAa,MAAKF,KAAL,CAAWG,QAAxB;AAPc;AAUjB;;;;yCACmB;AAAA;;AAChB,UAAIC,EAAE,GAAG,CAAT;AACA,WAAKC,OAAL,GAAe,aAAY,KAAKH,KAAjB,EAAwBI,GAAxB,CAA4B,UAACC,EAAD,EAAIC,CAAJ,EAAU;AACjD,YAAIC,OAAO,GAAGD,CAAC,GAAC,MAAI,CAACP,SAArB;;AACA,YAAIS,MAAM,GAAG,MAAI,CAACR,KAAL,CAAWK,EAAX,EAAeD,GAAf,CAAmB,UAACK,MAAD,EAAQC,CAAR,EAAc;AAC1C,cAAIC,OAAO,GAAGD,CAAC,GAAC,MAAI,CAACX,SAArB,CAD0C,CAE1C;;AACA,cAAGU,MAAM,CAACG,IAAP,IAAe,GAAlB,EACA;AACI;AAACV,cAAAA,EAAE,IAAI,CAAN;AAAQ;AACT,mBAAO,oBAAC,MAAD;AAAQ,cAAA,GAAG,EAAEA,EAAb;AAAiB,cAAA,CAAC,EAAES,OAApB;AAA6B,cAAA,CAAC,EAAEJ,OAAhC;AAAyC,cAAA,IAAI,EAAE,MAAI,CAACR,SAApD;AAA+D,cAAA,IAAI,EAAEU,MAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,WAJD,CAKA;AALA,eAMK,IAAGA,MAAM,CAACG,IAAP,IAAe,GAAlB,EACL;AACI;AAACV,gBAAAA,EAAE,IAAI,CAAN;AAAQ;AACT,qBAAO,oBAAC,MAAD;AAAQ,gBAAA,GAAG,EAAEA,EAAb;AAAiB,gBAAA,CAAC,EAAES,OAApB;AAA6B,gBAAA,CAAC,EAAEJ,OAAhC;AAAyC,gBAAA,IAAI,EAAE,MAAI,CAACR,SAApD;AAA+D,gBAAA,IAAI,EAAEU,MAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,aAJI,CAKL;AALK,iBAMA,IAAGA,MAAM,CAACG,IAAP,IAAe,GAAlB,EACL;AACI;AAACV,kBAAAA,EAAE,IAAI,CAAN;AAAQ;AACT,uBAAO,oBAAC,MAAD;AAAQ,kBAAA,GAAG,EAAEA,EAAb;AAAiB,kBAAA,CAAC,EAAES,OAApB;AAA6B,kBAAA,CAAC,EAAEJ,OAAhC;AAAyC,kBAAA,IAAI,EAAE,MAAI,CAACR,SAApD;AAAgE,kBAAA,KAAK,EAAC,OAAtE;AAA8E,kBAAA,IAAI,EAAEU,MAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACH,eAJI,CAKL;AALK,mBAMA,IAAGA,MAAM,CAACG,IAAP,IAAe,GAAlB,EACL;AACI;AAACV,oBAAAA,EAAE,IAAI,CAAN;AAAQ;AACT,yBAAO,oBAAC,MAAD;AAAQ,oBAAA,GAAG,EAAEA,EAAb;AAAiB,oBAAA,CAAC,EAAES,OAApB;AAA6B,oBAAA,CAAC,EAAEJ,OAAhC;AAAyC,oBAAA,IAAI,EAAE,MAAI,CAACR,SAApD;AAAgE,oBAAA,KAAK,EAAC,OAAtE;AAA8E,oBAAA,IAAI,EAAEU,MAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH,iBAJI,CAKL;AALK,qBAMA,IAAGA,MAAM,CAACG,IAAP,IAAe,GAAlB,EACL;AACI;AAACV,sBAAAA,EAAE,IAAI,CAAN;AAAQ;AACT,2BAAO,oBAAC,MAAD;AAAQ,sBAAA,GAAG,EAAEA,EAAb;AAAiB,sBAAA,CAAC,EAAES,OAApB;AAA6B,sBAAA,CAAC,EAAEJ,OAAhC;AAAyC,sBAAA,IAAI,EAAE,MAAI,CAACR,SAApD;AAA+D,sBAAA,IAAI,EAAEU,MAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH;AACJ,SAhCY,CAAb;;AAiCA;AAACP,UAAAA,EAAE,IAAI,CAAN;AAAQ;AACT,eACI;AAAK,UAAA,GAAG,EAAEA,EAAV;AAAc,UAAA,KAAK,EAAEf,eAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAwCqB,MAAxC,CADJ;AAGF,OAvCa,CAAf;AAwCH;;;6BACO;AAEJ,aACI;AAAK,QAAA,KAAK,EAAI1B,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKqB,OADV,CADJ;AAKH;;;;EA9DevB,KAAK,CAACiC,S;;AAiE1B,eAAenB,KAAf","sourcesContent":["import Map from './map'\r\nimport React from 'react'\r\nimport Square from './square'\r\n\r\n\r\nconst screen = {\r\n    width: '100%',\r\n    height: '100%',\r\n    backgroundColor: 'black',\r\n    margin: '0 auto',\r\n}\r\n\r\nconst squareContainer = {\r\n    margin: '0 auto',\r\n    position: 'relative',\r\n    length: '100%',\r\n    width: '100%',\r\n    padding: 0,\r\n    border: 0,\r\n    fontSize: 0,\r\n    letterSpacing: '-1px',\r\n}\r\n\r\n\r\n\r\nclass Level extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        //row col for new map\r\n        var rows = this.props.rows\r\n        var cols = this.props.cols\r\n        this.board = new Map(60, 50);\r\n        this.pixelSize = this.props.pixelSize;\r\n        this.arr2d = this.board.contents\r\n        \r\n\r\n    }\r\n    componentWillMount(){\r\n        var id = 0\r\n        this.squares = Object.keys(this.arr2d).map((el,i) => {\r\n            var offsetY = i*this.pixelSize;\r\n            var single = this.arr2d[el].map((sub_el,j) => {\r\n                var offsetX = j*this.pixelSize\r\n                //sides\r\n                if(sub_el.type == 'X')\r\n                {\r\n                    {id += 1}\r\n                    return <Square key={id} x={offsetX} y={offsetY} size={this.pixelSize} node={sub_el}/>\r\n                }\r\n                //corner (should be next to clear blocks)\r\n                else if(sub_el.type == 'C')\r\n                {\r\n                    {id += 1}\r\n                    return <Square key={id} x={offsetX} y={offsetY} size={this.pixelSize} node={sub_el}/>\r\n                }\r\n                //the gooey insides\r\n                else if(sub_el.type == 'L')\r\n                {\r\n                    {id += 1}\r\n                    return <Square key={id} x={offsetX} y={offsetY} size={this.pixelSize}  color='white' node={sub_el}/>\r\n                }\r\n                //hallways\r\n                else if(sub_el.type == 'H')\r\n                {\r\n                    {id += 1}\r\n                    return <Square key={id} x={offsetX} y={offsetY} size={this.pixelSize}  color='white' node={sub_el}/>\r\n                }\r\n                //blanks\r\n                else if(sub_el.type == '-')\r\n                {\r\n                    {id += 1}\r\n                    return <Square key={id} x={offsetX} y={offsetY} size={this.pixelSize} node={sub_el}/>\r\n                }\r\n            })\r\n            {id += 1}\r\n            return(\r\n                <div key={id} style={squareContainer}> {single}</div>\r\n            )\r\n         })\r\n    }\r\n    render(){\r\n\r\n        return(\r\n            <div style = {screen}>\r\n                {this.squares}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Level\r\n"]},"metadata":{},"sourceType":"module"}