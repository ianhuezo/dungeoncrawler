{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.2eb0322081da1d11f50a.hot-update.js","sources":["webpack:///./pages/room.js"],"sourcesContent":["class Node{\r\n    //how the room itself views the node\r\n    constructor(roomWalls, position){\r\n        this.type = null;\r\n        this.roomView = roomWalls\r\n        //position is [row, col] based\r\n        this.position = position\r\n        this.nextPosition = null\r\n        this.filled = false\r\n\r\n        if(roomWalls ===  null){\r\n            //means its a hallway/cooridor\r\n            this.type == 'H'\r\n        }\r\n        else if(this.roomView.corner){\r\n            //corner\r\n            this.type = 'C';\r\n        }\r\n        //I don't allow corners to have rooms\r\n        else if(this.roomView.left || this.roomView.right || this.roomView.bottom || this.roomView.top){\r\n            //\r\n            this.type = 'X';\r\n        }\r\n        else{\r\n            this.type = 'O';\r\n        }\r\n        this.left = false;\r\n        this.right = false;\r\n        this.top = false;\r\n        this.bottom = false;\r\n\r\n        this.determineBarriers();\r\n\r\n    }\r\n    determineBarriers(){\r\n        switch (this.type){\r\n            case 'O':\r\n                this.fillAll()\r\n                break\r\n            case 'X':\r\n                this.fillNone()\r\n            case 'C':\r\n                this.fillAll()\r\n            default:\r\n                this.fillNone()\r\n        }\r\n    }\r\n\r\n    fillAll(){\r\n        this.left = true\r\n        this.right = true\r\n        this.bottom = true\r\n        this.top = true\r\n        this.filled = true\r\n    }\r\n\r\n    fillNone(){\r\n        this.left = false\r\n        this.right = false\r\n        this.bottom = false\r\n        this.top = false\r\n        this.filled = false\r\n    }\r\n\r\n    createCooridor(direction){\r\n        //input is char for the direction \r\n        switch(direction){\r\n            case 'l':\r\n                this.left = false\r\n                this.right = true\r\n                this.bottom = true\r\n                this.top = true\r\n                this.filled = false\r\n            case 'r':\r\n                this.left = true\r\n                this.right = false\r\n                this.bottom = true\r\n                this.top = true\r\n                this.filled = false\r\n            case 't':\r\n                this.left = true\r\n                this.right = true\r\n                this.bottom = true\r\n                this.top = false\r\n                this.filled = false\r\n            case 'b':\r\n                this.left = true\r\n                this.right = true\r\n                this.bottom = false\r\n                this.top = true\r\n                this.filled = false\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nclass Room{\r\n    //default values for length and height\r\n    length = 10;\r\n    width = 10;\r\n    constructor(startingPoint, length = m_length, width = m_width){\r\n        //startingPoint is the [row, col]\r\n        this.length = length;\r\n        this.width = width;\r\n        //position of the whole rectangle's area\r\n        // this.position = {\r\n        //     //row col based\r\n        //     topLeft: [startingPoint[0], startingPoint[1]],\r\n        //     topRight: [startingPoint[0], startingPoint[1] + this.length - 1],\r\n        //     bottomLeft: [startingPoint[0] + this.width - 1, startingPoint[1]],\r\n        //     bottomRight: [startingPoint[0] + this.width - 1, startingPoint[1] + this.length - 1]\r\n        // };\r\n        //a list of all the nodes that can put a cooridor\r\n        this.viableSides = {\r\n            left : [],\r\n            right: [],\r\n            top: [],\r\n            bottom: []\r\n        }\r\n        //construct the room with all of its nodes\r\n        this.roomContents = this.constructRoom();\r\n    }\r\n    constructRoom(){\r\n       \r\n        let roomArea = [];\r\n        this.constructFirstRoom(roomArea)\r\n        return roomArea;\r\n    }\r\n\r\n    get contents(){\r\n        return this.roomContents;\r\n    }\r\n\r\n    get position(){\r\n        return this.position;\r\n    }\r\n\r\n    constructFirstRoom(area){\r\n        for (var i = 0; i < this.width; i++)//row\r\n        {\r\n            let roomRow = [];\r\n            for(var j = 0; j < this.length; j++)//col\r\n            {\r\n                //get all the logic for the walls\r\n                let wallBooleans = this.isWall(i, j);\r\n                //assign viable indices to reference later when buildling cooridors\r\n                this.buildViableCooridors(wallBooleans, [i,j])\r\n                //create roomnodes that are \r\n                let roomNode = new Node(wallBooleans, [i,j])\r\n                roomRow.push(roomNode);\r\n            }\r\n            area.push(roomRow);\r\n        }\r\n    }\r\n    //record indices that can place a cooridor in the room\r\n    buildViableCooridors(wall, position){\r\n        if(!wall.corner){\r\n            if(wall.left){\r\n                this.viableSides.left.push(position)\r\n            }\r\n            else if(wall.right){\r\n                this.viableSides.right.push(position)\r\n            }\r\n            else if(wall.top){\r\n                this.viableSides.top.push(position)\r\n            }\r\n            else if(wall.bottom){\r\n                this.viableSides.bottom.push(position)\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    isWall(row, col){\r\n        //all directions walls are in\r\n        const isLeft = (col == 0 && row < this.length);\r\n        const isRight = (col == this.length-1 && row < this.width);\r\n        const isTop = (row == 0);\r\n        const isBottom = (row == this.length - 1);\r\n        //corner cases\r\n        const isTopLeft = isLeft && isTop;\r\n        const isTopRight = isRight && isTop;\r\n        const isBottomLeft = isLeft && isBottom;\r\n        const isBottomRight = isRight && isBottom;\r\n        const isCorner = (isTopLeft || isTopRight || isBottomLeft || isBottomRight);\r\n        return {\r\n            right: isRight,\r\n            left: isLeft,\r\n            top: isTop,\r\n            bottom: isBottom,\r\n            topLeft: isTopLeft,\r\n            topRight: isTopRight,\r\n            bottomLeft: isBottomLeft,\r\n            bottomRight: isBottomRight,\r\n            corner: isCorner,\r\n            cooridor: false\r\n        }\r\n    }\r\n\r\n    buildCooridor(direction){\r\n        //direction is the input from map that will \r\n        //determine where to put something\r\n        //builds a cooridor where the x was\r\n        //choose from random position\r\n        var randomPosition = null\r\n        switch(direction){\r\n            case 'l':\r\n                randomPosition = this.viableSides.left.random()\r\n            case 'r':\r\n                randomPosition = this.viableSides.right.random()\r\n            case 't':\r\n                randomPosition = this.viableSides.top.random()\r\n            case 'b':\r\n                randomPosition = this.viableSides.bottom.random()\r\n            default:\r\n                break\r\n        }\r\n        console.log(\"The random position is \", row, col)\r\n        var row = randomPosition[0]\r\n        var col = randomPosition[1]\r\n        //take the roomView attribute of the node\r\n        var cooridorNode = new Node(null, [row,col])\r\n        cooridorNode.createCooridor(direction)\r\n        //changes the x to become a cooridor, H\r\n        this.roomContents[col][row] = cooridorNode\r\n    }\r\n\r\n}\r\n//from https://stackoverflow.com/questions/5915096/get-random-item-from-javascript-array, because looked simple and elegant\r\nArray.prototype.random = function () {\r\n    return this[Math.floor((Math.random()*this.length))];\r\n  }\r\n\r\nexport default Room"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AATA;AAWA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AA1BA;AA4BA;;;;;;AAKA;;;AACA;AAGA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;;;AAAA;AAEA;AACA;AACA;AACA;;;AAUA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAVA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAhGA;AACA;AACA;;;AAEA;AACA;AACA;;;;AA6FA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}