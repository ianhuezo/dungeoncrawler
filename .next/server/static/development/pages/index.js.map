{"version":3,"file":"static\\development\\pages\\index.js","sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/assign.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/create.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/define-property.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/get-prototype-of.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/keys.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/set-prototype-of.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/symbol.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/symbol/iterator.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/createClass.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/inherits.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/setPrototypeOf.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/typeof.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/interopRequireDefault.js","webpack:///./pages/index.js","webpack:///./pages/level.js","webpack:///./pages/map.js","webpack:///./pages/room.js","webpack:///./pages/square.js","webpack:///external \"core-js/library/fn/object/assign\"","webpack:///external \"core-js/library/fn/object/create\"","webpack:///external \"core-js/library/fn/object/define-property\"","webpack:///external \"core-js/library/fn/object/get-prototype-of\"","webpack:///external \"core-js/library/fn/object/keys\"","webpack:///external \"core-js/library/fn/object/set-prototype-of\"","webpack:///external \"core-js/library/fn/symbol\"","webpack:///external \"core-js/library/fn/symbol/iterator\"","webpack:///external \"react\"","webpack:///external \"zlib\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"core-js/library/fn/object/assign\");","module.exports = require(\"core-js/library/fn/object/create\");","module.exports = require(\"core-js/library/fn/object/define-property\");","module.exports = require(\"core-js/library/fn/object/get-prototype-of\");","module.exports = require(\"core-js/library/fn/object/keys\");","module.exports = require(\"core-js/library/fn/object/set-prototype-of\");","module.exports = require(\"core-js/library/fn/symbol\");","module.exports = require(\"core-js/library/fn/symbol/iterator\");","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import _Object$defineProperty from \"../../core-js/object/define-property\";\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n\n    _Object$defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import _Object$getPrototypeOf from \"../../core-js/object/get-prototype-of\";\nimport _Object$setPrototypeOf from \"../../core-js/object/set-prototype-of\";\nexport default function _getPrototypeOf(o) {\n  _getPrototypeOf = _Object$setPrototypeOf ? _Object$getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || _Object$getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import _Object$create from \"../../core-js/object/create\";\nimport setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = _Object$create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","import _Object$setPrototypeOf from \"../../core-js/object/set-prototype-of\";\nexport default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = _Object$setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import _Symbol$iterator from \"../../core-js/symbol/iterator\";\nimport _Symbol from \"../../core-js/symbol\";\n\nfunction _typeof2(obj) { if (typeof _Symbol === \"function\" && typeof _Symbol$iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof _Symbol === \"function\" && obj.constructor === _Symbol && obj !== _Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nexport default function _typeof(obj) {\n  if (typeof _Symbol === \"function\" && _typeof2(_Symbol$iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof _Symbol === \"function\" && obj.constructor === _Symbol && obj !== _Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","import Room from './room'\r\nimport Level from './level'\r\n\r\nfunction Home() {\r\n\r\n    return(\r\n        <div>\r\n            <Level />\r\n        </div>\r\n       \r\n       \r\n    );\r\n  }\r\n   \r\n  export default Home","import Map from './map'\r\nimport React from 'react'\r\nimport Square from './square'\r\n\r\n\r\nconst screen = {\r\n    width: '1000px',\r\n    height: '800px',\r\n    backgroundColor: 'grey',\r\n    margin: '0 auto',\r\n}\r\n\r\nconst squareContainer = {\r\n    margin: '0 auto',\r\n    position: 'relative',\r\n    length: '100%',\r\n    width: '100%',\r\n    padding: 0,\r\n    border: 0,\r\n    fontSize: 0,\r\n    letterSpacing: '-1px',\r\n}\r\n\r\n\r\n\r\nclass Level extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        //row col for new map\r\n        this.board = new Map(100, 80);\r\n        this.pixelSize = 8;\r\n        this.arr2d = this.board.contents\r\n        \r\n\r\n    }\r\n    componentWillMount(){\r\n        var id = 0\r\n        this.squares = Object.keys(this.arr2d).map((el,i) => {\r\n            var offsetY = i*this.pixelSize;\r\n            var single = this.arr2d[el].map((sub_el,j) => {\r\n                var offsetX = j*this.pixelSize\r\n                //sides\r\n                if(sub_el.type == 'X')\r\n                {\r\n                    {id += 1}\r\n                    return <Square key={id} x={offsetX} y={offsetY} size={this.pixelSize} node={sub_el}/>\r\n                }\r\n                //corner (should be next to clear blocks)\r\n                else if(sub_el.type == 'C')\r\n                {\r\n                    {id += 1}\r\n                    return <Square key={id} x={offsetX} y={offsetY} size={this.pixelSize} node={sub_el}/>\r\n                }\r\n                //the gooey insides\r\n                else if(sub_el.type == 'L')\r\n                {\r\n                    {id += 1}\r\n                    return <Square key={id} x={offsetX} y={offsetY} size={this.pixelSize}  color='red' node={sub_el}/>\r\n                }\r\n                //hallways\r\n                else if(sub_el.type == 'H')\r\n                {\r\n                    {id += 1}\r\n                    return <Square key={id} x={offsetX} y={offsetY} size={this.pixelSize}  color='white' node={sub_el}/>\r\n                }\r\n                //blanks\r\n                else if(sub_el.type == '-')\r\n                {\r\n                    {id += 1}\r\n                    return <Square key={id} x={offsetX} y={offsetY} size={this.pixelSize} node={sub_el}/>\r\n                }\r\n            })\r\n            {id += 1}\r\n            return(\r\n                <div key={id} style={squareContainer}> {single}</div>\r\n            )\r\n         })\r\n    }\r\n    render(){\r\n\r\n        return(\r\n            <div style = {screen}>\r\n                {this.squares}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Level\r\n","import {Room, Node} from './room'\r\n\r\nclass Map{\r\n    constructor(boardWidth, boardlength){\r\n        //describes the boards with relative to amount of squares\r\n        this.width = boardWidth;\r\n        this.height = boardlength;\r\n        this.clearedBoard = [];\r\n        //initialize the board with a clear state\r\n        this.clear()\r\n        this.board = this.clearedBoard\r\n        this.roomCounter = 8\r\n        this.createRooms(this.roomCounter)\r\n    }\r\n\r\n    clear(){\r\n        for(var i = 0; i < this.height; i++){\r\n            let arr = []\r\n            for(var j = 0; j < this.width; j++){\r\n                var emptyNodes = new Node('-', [i,j])\r\n                arr.push(emptyNodes)\r\n            }\r\n            this.clearedBoard.push(arr)\r\n        }\r\n    }\r\n    \r\n    createRooms(roomNumber){\r\n\r\n        var roomCount = roomNumber\r\n        var randomSize = [5,7]\r\n        var roomNode = new Room(randomSize[0], randomSize[1])\r\n        // //create some halls\r\n        var halls = this.generateHalls(2)\r\n        //initialize queue\r\n        var position = [25,40]\r\n        var halls = this.generateHalls(2)\r\n        for(var i = 0; i < halls.length; i++){\r\n            roomNode.buildCooridor(halls[i])\r\n        }\r\n        roomNode.changePosition(position)\r\n        roomNode.visited = true\r\n\r\n        this.placeRoom(roomNode)\r\n\r\n        var queue = []\r\n        queue.push(roomNode)\r\n        var randomCount = 5\r\n        while(queue.length){\r\n            var node = queue.shift(0)\r\n            if(node)\r\n            {\r\n                var rooms = this.generateRooms(node)\r\n                for(var i = 0; i < rooms.length; i++){\r\n                    this.placeRoom(rooms[i])\r\n                    queue.push(rooms[i])\r\n                }\r\n            }\r\n            return\r\n        }\r\n\r\n\r\n    }\r\n//methods for the right\r\n    rightColPositions(callback){\r\n        var colSpan = arguments[0]\r\n        var rowIdx = arguments[1]\r\n        var board = arguments[2]\r\n        var l = colSpan[0]\r\n        var r = colSpan[1]\r\n\r\n        try{\r\n            if(board[rowIdx][r].filled == false){\r\n                return [l,r]\r\n            }\r\n            else{\r\n                return null\r\n            }\r\n        }\r\n        catch(e){\r\n            console.log('column position is null with',l,r)\r\n        }\r\n    }\r\n    //shared method for both left and right\r\n    rightRowPositions(callback){\r\n        var rowSpan = arguments[0]\r\n        var colIdx = arguments[1] + 1\r\n        var board = arguments[2]\r\n        //get top and bottom\r\n        var t = rowSpan[0]\r\n        var b = rowSpan[1]\r\n        //create copies to check reduction bounds\r\n        var originalT = t\r\n\r\n        var counter = 0\r\n\r\n        var span = Math.abs(t-b)\r\n        //reduce by more than a half because of offsets\r\n        t = t - Math.floor((span/3))\r\n        b = b - Math.floor(span/3)\r\n        //update the span\r\n        span = Math.abs(t - b)\r\n        board[24][45].filled = true\r\n        board[25][45].filled = true\r\n        board[26][45].filled = true\r\n        try{\r\n            //if nothing has to be done return the positions as is\r\n            if(board[t][colIdx].filled == false && board[b][colIdx].filled == false &&//checks if the board is filled there\r\n                board[t][colIdx-1].type !== 'H' && board[b][colIdx-1] !== 'H'){//checks the bounds to make hall is not in the empty spaces\r\n                console.log('returning original')\r\n                return [t,b]\r\n            }\r\n            else{\r\n                while(((board[t][colIdx].filled == true || board[b][colIdx].filled == true) ||\r\n                      (board[t][colIdx-1].type !== 'H' || board[b][colIdx-1].type !== 'H')) && \r\n                      counter < 3){\r\n                    console.log('reducing')\r\n                    //top is occupied, reduce by a quarter, usually just 1 because rooms are small right now\r\n                    if(board[t][colIdx].filled == true){\r\n                        t = t + Math.floor(span/4)\r\n                    }\r\n                    //bot is occupied, reduce by a quarter, usually just 1 because rooms are small right now\r\n                    if(board[b][colIdx].filled == true){\r\n                        b = b - Math.floor(span/4)\r\n                    }\r\n                    //return the updated positions if the positions are not filled\r\n                    if(board[t][colIdx].filled == false && board[b][colIdx].filled == false && originalT >= t && t < b){\r\n                        return [t,b]\r\n                    }\r\n                    //update the span\r\n                    span = Math.abs(t-b)\r\n                    //update counter\r\n                    counter += 1\r\n                }\r\n            }\r\n\r\n        }\r\n        catch(e){\r\n            console.log('row position is null with top:${t} and bottom: ${b}')\r\n            return null\r\n        }\r\n        return null\r\n    }\r\n\r\n    //goes to generateRoom for generateRooms()\r\n    generateRoom(rowcallback, colcallback, rowSpan, colSpan, direction){\r\n        var board = this.board\r\n        const rowPosition = rowcallback(rowSpan, colSpan[0], board)\r\n        const colPosition = colcallback(colSpan, rowSpan[0], board)\r\n        if(rowPosition == null || colPosition == null){\r\n            console.log('The positions are ', rowPosition, colPosition)\r\n            return null\r\n        }\r\n\r\n        const rowSize = Math.abs(rowPosition[1] - rowPosition[0])\r\n        const colSize = Math.abs(colPosition[1] - colPosition[0])\r\n        const position = [rowPosition[0], colPosition[0]]\r\n\r\n        const room = new Room(rowSize, colSize)\r\n        const halls = this.generateHalls(2)\r\n        for(var i = 0; i < halls.length; i++){\r\n            if(halls[i] == direction ){\r\n                continue\r\n            }\r\n            room.buildCooridor(halls[i])\r\n        }\r\n\r\n        room.changePosition(position)\r\n        return room\r\n\r\n    }\r\n\r\n\r\n\r\n//where all rooms are generatred and created, the first room generated will have a large impact on the other rooms created\r\n    generateRooms(node){\r\n        const halls = node.halls\r\n        const len = halls.length\r\n        var rooms = []\r\n        let newRoom = null\r\n        for(var i = 0; i < len; i++){\r\n            let roomSize = this.randomSize(5,7)\r\n            let rowStart = halls[i].position[0]\r\n            let colStart =  halls[i].position[1]\r\n            switch(halls[i].direction){\r\n                case 'r':\r\n                    //the -1 is to offset the side on the top\r\n                    var rowSpan = [rowStart - 1, rowStart + roomSize[0] - 1]\r\n                    //dont need to offset the col because the hall connect what would be the blank space\r\n                    var colSpan = [colStart , colStart + roomSize[1]]\r\n                    try{\r\n                        newRoom = this.generateRoom(this.rightRowPositions, this.rightColPositions, rowSpan, colSpan, 'l')\r\n                        if(newRoom == null){\r\n                            continue\r\n                        }\r\n                        rooms.push(newRoom)\r\n                    }\r\n                    catch(e){\r\n                        console.log('room is null')\r\n                    }\r\n                    break\r\n                case 'l':\r\n\r\n                    break\r\n                case 't':\r\n\r\n                    break\r\n                case 'b':\r\n\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n        return rooms\r\n    }\r\n\r\n    generateHalls(num){\r\n        var hallDirections = ['l','r','t','b']\r\n        var randomDirs = []\r\n        var counter = num\r\n        while(counter > -1){\r\n            var idx = Math.floor((Math.random() * (hallDirections.length)) + 0)\r\n            randomDirs.push(hallDirections[idx])\r\n            hallDirections.splice(idx, 1)\r\n            counter -= 1\r\n        }\r\n        return randomDirs\r\n    }\r\n\r\n    randomSize(min, max){\r\n        var length = Math.floor((Math.random() * max) + min);\r\n        var width = Math.floor((Math.random() * max) + min);\r\n        const arr = [length, width]\r\n        return arr\r\n    }\r\n    \r\n    placeRoom(room){\r\n        //where position is based on row, col for map\r\n        var rowLength = room.width\r\n        var colLength = room.height\r\n        for(var i = 0; i < rowLength; i++){\r\n            for(var j = 0; j < colLength; j++){\r\n                var row = room.contents[i][j].position[0]\r\n                var col = room.contents[i][j].position[1]\r\n                if(this.board[row][col].type !== 'H')\r\n                {\r\n                    this.board[row][col] = room.contents[i][j]\r\n                    this.board[row][col].filled = true\r\n                }\r\n                else{\r\n                    this.board[row][col].filled = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get contents(){\r\n        return this.board;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Map","class Node{\r\n    //how the room itself views the node\r\n    //will eventually put how the level itself views the\r\n    constructor(roomWalls, position){\r\n        this.type = null;\r\n        this.roomView = roomWalls\r\n        //position is [row, col] based\r\n        this.position = position\r\n        this.filled = false\r\n        //only used for a subset of the nodes, the hallways\r\n        this.direction = ''\r\n        \r\n        //empty tile\r\n        if(this.roomView == '-'){\r\n            this.type = '-'\r\n        }\r\n        //means its a hallway/cooridor\r\n        else if(this.roomView == 'H'){\r\n            this.type = 'H';\r\n        }\r\n        else if(this.roomView.corner){\r\n            //corner\r\n            this.type = 'C';\r\n        }\r\n        //sides of the room\r\n        else if(this.roomView.left || this.roomView.right || this.roomView.bottom || this.roomView.top){\r\n            //\r\n            this.type = 'X';\r\n        }\r\n        //the middle of the room\r\n        else{\r\n            this.type = 'L';\r\n        }\r\n        this.left = false;\r\n        this.right = false;\r\n        this.top = false;\r\n        this.bottom = false;\r\n\r\n        this.determineBarriers();\r\n\r\n    }\r\n    determineBarriers(){\r\n        switch (this.type){\r\n            case 'O':\r\n                this.fillAll()\r\n                break\r\n            case 'X':\r\n                this.fillAll()\r\n            case 'C':\r\n                this.fillAll()\r\n            default:\r\n                this.fillNone()\r\n        }\r\n    }\r\n\r\n    fillAll(){\r\n        this.left = true\r\n        this.right = true\r\n        this.bottom = true\r\n        this.top = true\r\n        this.filled = true\r\n    }\r\n\r\n    fillNone(){\r\n        this.left = false\r\n        this.right = false\r\n        this.bottom = false\r\n        this.top = false\r\n        this.filled = false\r\n    }\r\n    //the room itself will create a cooridor from the nodes\r\n    createCooridor(direction){\r\n        //input is char for the direction \r\n        switch(direction){\r\n            case 'l':\r\n                this.left = false\r\n                this.right = true\r\n                this.bottom = true\r\n                this.top = true\r\n                this.filled = false\r\n            case 'r':\r\n                this.left = true\r\n                this.right = false\r\n                this.bottom = true\r\n                this.top = true\r\n                this.filled = false\r\n            case 't':\r\n                this.left = true\r\n                this.right = true\r\n                this.bottom = true\r\n                this.top = false\r\n                this.filled = false\r\n            case 'b':\r\n                this.left = true\r\n                this.right = true\r\n                this.bottom = false\r\n                this.top = true\r\n                this.filled = false\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nclass Room{\r\n    //default values for length and height\r\n    constructor(height = 10, width = 10,parentHall = null){\r\n        //startingPoint is the [row, col]\r\n        this.height = height;\r\n        this.width = width;\r\n\r\n        //the cooridor will decide starting position if there is a parent node with a cooridor being input\r\n        //will overwrite the parents left, right, bottom, or top x and c's depending \r\n        this.parentHall = parentHall;\r\n        if(this.parentCooridor != null){\r\n\r\n        }\r\n        //a list of all the nodes that can put a cooridor\r\n        this.viableSides = {\r\n            left : [],\r\n            right: [],\r\n            top: [],\r\n            bottom: []\r\n        }\r\n        this.visited = false\r\n        //construct the room with halls\r\n        this.halls = []\r\n        this.removedHalls = []\r\n        this.roomContents = this.constructRoom();\r\n    }\r\n    constructRoom(){\r\n       \r\n        let roomArea = [];\r\n        this.constructFirstRoom(roomArea)\r\n        return roomArea;\r\n    }\r\n\r\n    get contents(){\r\n        return this.roomContents;\r\n    }\r\n\r\n\r\n    constructFirstRoom(area){\r\n        for (var i = 0; i < this.width; i++)//row\r\n        {\r\n            let roomRow = [];\r\n            for(var j = 0; j < this.height; j++)//col\r\n            {\r\n                //get all the logic for the walls\r\n                let wallBooleans = this.isWall(i, j);\r\n                //assign viable indices to reference later when buildling cooridors\r\n                this.buildViableCooridors(wallBooleans, [i,j])\r\n                //create roomnodes that are \r\n                let roomNode = new Node(wallBooleans, [i,j])\r\n                roomRow.push(roomNode);\r\n            }\r\n            area.push(roomRow);\r\n        }\r\n    }\r\n    //record indices that can place a cooridor in the room\r\n    buildViableCooridors(wall, position){\r\n        if(!wall.corner){\r\n            if(wall.top){\r\n                this.viableSides.top.push(position)\r\n            }\r\n            else if(wall.bottom){\r\n                this.viableSides.bottom.push(position)\r\n            }\r\n            else if(wall.right){\r\n                this.viableSides.right.push(position)\r\n            }\r\n            else if(wall.left){\r\n                this.viableSides.left.push(position)\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    isWall(row, col){\r\n        //all directions walls are in\r\n        // const isLeft = (col == 0 && row < this.width)\r\n        // const isRight = (col == this.height - 1 && row < this.width)\r\n        // const isTop = (col < this.height - 1 && row == 0)\r\n        // const isBottom = (row == this.height)\r\n        const isTop = (row == 0)\r\n        const isBottom = (row == this.width - 1)\r\n        const isLeft = (col == 0)\r\n        const isRight = (col == this.height - 1)\r\n        //corner cases\r\n        const isTopLeft = isLeft && isTop;\r\n        const isTopRight = isRight && isTop;\r\n        const isBottomLeft = isLeft && isBottom;\r\n        const isBottomRight = isRight && isBottom;\r\n        const isCorner = (isTopLeft || isTopRight || isBottomLeft || isBottomRight);\r\n        return {\r\n            right: isRight,\r\n            left: isLeft,\r\n            top: isTop,\r\n            bottom: isBottom,\r\n            topLeft: isTopLeft,\r\n            topRight: isTopRight,\r\n            bottomLeft: isBottomLeft,\r\n            bottomRight: isBottomRight,\r\n            corner: isCorner,\r\n            cooridor: false\r\n        }\r\n    }\r\n\r\n    updatePosition(position){\r\n        for(var i = 0; i < this.width; i++){\r\n            for(var j = 0; j < this.height; j++){\r\n                this.roomContents[i][j].position = [this.roomContents[i][j].position[0] + position[0],this.roomContents[i][j].position[1] + position[1]]\r\n            }\r\n        }\r\n    }\r\n\r\n    updateSide(key, position){\r\n        var newArr = []\r\n        for(var ele in this.viableSides[key]){\r\n            newArr.push([ele[0] + position[0], ele[1] + position[1]])\r\n        }\r\n        this.viableSides[key] = newArr\r\n    }\r\n\r\n    updateViableSides(position){\r\n        this.updateSide(\"left\", position)\r\n        this.updateSide(\"righ\", position)\r\n        this.updateSide(\"top\", position)\r\n        this.updateSide(\"bottom\", position)\r\n    }\r\n\r\n    changePosition(position){\r\n        //where position is the position of the whole map wanted, will be from top left starting\r\n\r\n        //update regular room nodes\r\n        this.updatePosition(position)\r\n        //update halls to new position\r\n        // this.updateViableSides(position)\r\n    }\r\n\r\n    removeRoomCooridors(directions){\r\n        if(this.halls){\r\n            \r\n        }\r\n    }\r\n\r\n    buildCooridor(direction){\r\n        //direction is the input from map that will \r\n        //determine where to put something\r\n        //builds a cooridor where the x was\r\n        //choose from random position\r\n        var randomPosition = null\r\n        switch(direction){\r\n            case 'l':\r\n                randomPosition = this.viableSides.left.random()\r\n                break;\r\n            case 'r':\r\n                randomPosition = this.viableSides.right.random()\r\n                break;\r\n            case 't':\r\n                randomPosition = this.viableSides.top.random()\r\n                break;\r\n            case 'b':\r\n                randomPosition = this.viableSides.bottom.random()\r\n                break;\r\n            default:\r\n                break\r\n        }\r\n        if(randomPosition == null){\r\n            return\r\n        }\r\n        const row = randomPosition[0]\r\n        const col = randomPosition[1]\r\n        //take the roomView attribute of the node\r\n\r\n        //create the node and reference which direction it is to the room\r\n        var cooridorNode = new Node('H', [row,col])\r\n        cooridorNode.createCooridor(direction)\r\n        cooridorNode.direction = direction\r\n        this.halls.push(cooridorNode)\r\n        //assign back to the room\r\n        this.roomContents[row][col] = cooridorNode\r\n    }\r\n    //rooms could be different size, so go off the smaller room for merging\r\n\r\n}\r\n//from https://stackoverflow.com/questions/5915096/get-random-item-from-javascript-array, because looked simple and elegant\r\nArray.prototype.random = function () {\r\n    return this[Math.floor((Math.random()*this.length))];\r\n  }\r\n\r\n  module.exports = {\r\n      Room,\r\n      Node\r\n  }","import React from 'react'\r\nimport { Z_BLOCK } from 'zlib';\r\n\r\n//a 10x10 square when border is included\r\nconst squareStyle = {\r\n    border: '0.3px solid black',\r\n    fontSize: 0,\r\n    letterSpacing: '-1px',\r\n    display: 'inline-block'\r\n}\r\n\r\nfunction Square(props){\r\n    const position = {\r\n        left: props.x + 'px',\r\n        top: props.y + 'px',\r\n        width: props.size + 'px',\r\n        height: props.size + 'px',\r\n        backgroundColor: props.color\r\n    }\r\n\r\n    const node = props.node\r\n\r\n    return(\r\n        <div style={Object.assign(squareStyle, position)}>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Square","module.exports = require(\"core-js/library/fn/object/assign\");","module.exports = require(\"core-js/library/fn/object/create\");","module.exports = require(\"core-js/library/fn/object/define-property\");","module.exports = require(\"core-js/library/fn/object/get-prototype-of\");","module.exports = require(\"core-js/library/fn/object/keys\");","module.exports = require(\"core-js/library/fn/object/set-prototype-of\");","module.exports = require(\"core-js/library/fn/symbol\");","module.exports = require(\"core-js/library/fn/symbol/iterator\");","module.exports = require(\"react\");","module.exports = require(\"zlib\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxFA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAYA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;;;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AA5DA;AACA;AA8DA;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AA3BA;AA6BA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;ACvQA;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AATA;AAWA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AA1BA;AA4BA;;;;;AAKA;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAEA;AACA;AACA;AACA;;;AAOA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;AAEA;AACA;AAGA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAdA;AACA;AAeA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAlJA;AACA;AACA;;;AAmJA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;;;;;;;;;;;;;;;;;;;;;ACrSA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC7BA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}